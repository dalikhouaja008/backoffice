// lib/data/datasources/docusign_remote_data_source.dart
import 'dart:convert';
import 'dart:html' as html;
import 'dart:typed_data';
import 'package:dio/dio.dart';
import 'package:flareline/core/services/secure_storage.dart';
import 'package:logger/logger.dart';

class DocuSignRemoteDataSource {
  final Dio dio;
  final Logger logger;
  final String baseUrl;
  final SecureStorageService secureStorage;
  
  // Cl√©s de stockage sp√©cifiques pour DocuSign
  static const String _docusignTokenKey = 'docusign_token';
  static const String _docusignAccountIdKey = 'docusign_account_id';
  static const String _docusignExpiryKey = 'docusign_expiry';

  DocuSignRemoteDataSource({
    required this.dio,
    required this.logger,
    required this.secureStorage,
    this.baseUrl = 'https://api.landservice.com', // Remplacez par votre URL d'API
  });

  // M√©thode pour v√©rifier si l'utilisateur est connect√© √† DocuSign
  Future<bool> isAuthenticated() async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üîê V√©rification de l\'authentification DocuSign');
      
      // V√©rifier si les tokens existent
      final token = await secureStorage.read(key: _docusignTokenKey);
      final accountId = await secureStorage.read(key: _docusignAccountIdKey);
      final expiryStr = await secureStorage.read(key: _docusignExpiryKey);

      // Si les tokens n'existent pas, l'utilisateur n'est pas authentifi√©
      if (token == null || accountId == null || expiryStr == null) {
        logger.i('[$timestamp] üö´ Authentification DocuSign inactive: tokens manquants');
        return false;
      }

      // Convertir la date d'expiration
      final expiry = DateTime.parse(expiryStr);
      final now = DateTime.now();

      // V√©rifier si le token est expir√©
      if (now.isAfter(expiry)) {
        logger.i('[$timestamp] üö´ Token DocuSign expir√© le ${expiry.toIso8601String()}');
        
        // Supprimer les tokens expir√©s
        await _clearDocuSignTokens();
        return false;
      }

      logger.i(' ‚úÖ Authentification DocuSign active et valide'
               '\n‚îî‚îÄ Token: ${token.substring(0, 10)}...'
               '\n‚îî‚îÄ Account ID: $accountId'
               '\n‚îî‚îÄ Expiration: $expiryStr');
      return true;
    } catch (e) {
      logger.e(' ‚ùå Erreur lors de la v√©rification d\'authentification DocuSign'
               '\n‚îî‚îÄ Error: $e');
      return false;
    }
  }

  // M√©thode pour effacer les tokens DocuSign
  Future<void> _clearDocuSignTokens() async {
    final timestamp = DateTime.now().toIso8601String();
    logger.i('[$timestamp] üßπ Suppression des tokens DocuSign');
    
    await Future.wait([
      secureStorage.delete(key: _docusignTokenKey),
      secureStorage.delete(key: _docusignAccountIdKey),
      secureStorage.delete(key: _docusignExpiryKey)
    ]);
    
    logger.i('[$timestamp] ‚úÖ Tokens DocuSign supprim√©s avec succ√®s');
  }

  // M√©thode pour initialiser l'authentification DocuSign
  Future<bool> initiateAuthentication() async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üöÄ Initialisation de l\'authentification DocuSign');

      // Cr√©er l'URL de redirection
      final authUrl = '$baseUrl/docusign/login';
      
      // D√©finir les dimensions pour la fen√™tre popup
      final width = 800;
      final height = 600;
      final left = (html.window.screen!.width! - width) / 2;
      final top = (html.window.screen!.height! - height) / 4;
      
      // Ouvrir une fen√™tre popup pour l'authentification
      html.window.open(
        authUrl,
        'DocuSignAuth',
        'width=$width,height=$height,left=$left,top=$top,resizable,scrollbars,status'
      );
      
      logger.i('[$timestamp] üåê Fen√™tre d\'authentification DocuSign ouverte avec succ√®s');
      return true;
    } catch (e) {
      logger.e('‚ùå Erreur lors de l\'initialisation de l\'authentification DocuSign'
               '\n‚îî‚îÄ Error: $e');
      return false;
    }
  }

  // M√©thode pour cr√©er une enveloppe pour signature embarqu√©e
  Future<Map<String, dynamic>> createEmbeddedEnvelope({
    required String documentBase64,
    required String signerEmail,
    required String signerName,
    required String title,
  }) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üì® Cr√©ation d\'une enveloppe DocuSign'
               '\n‚îî‚îÄ Signataire: $signerName ($signerEmail)'
               '\n‚îî‚îÄ Titre: $title'
               '\n‚îî‚îÄ Taille du document: ${documentBase64.length} caract√®res');

      // V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        throw Exception('Non authentifi√© √† DocuSign. Veuillez vous connecter d\'abord.');
      }

      // R√©cup√©rer les tokens
      final docusignToken = await secureStorage.read(key: _docusignTokenKey);
      final authToken = await secureStorage.getAccessToken();

      // Configuration de la requ√™te
      final options = Options(
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $authToken',
          'X-DocuSign-Token': 'Bearer $docusignToken',
        },
      );

      // Donn√©es √† envoyer
      final data = {
        'documentBase64': documentBase64,
        'signerEmail': signerEmail,
        'signerName': signerName,
        'title': title,
      };

      // Appel √† l'API
      final response = await dio.post(
        '$baseUrl/docusign/create-embedded-envelope',
        options: options,
        data: data,
      );

      if (response.statusCode == 200) {
        logger.i('[$timestamp] ‚úÖ Enveloppe cr√©√©e avec succ√®s'
                 '\n‚îî‚îÄ R√©ponse: ${response.data}');
                 
        return response.data;
      } else {
        logger.e('[$timestamp] ‚ùå Erreur lors de la cr√©ation de l\'enveloppe'
                 '\n‚îî‚îÄ Code HTTP: ${response.statusCode}'
                 '\n‚îî‚îÄ R√©ponse: ${response.data}');
                 
        throw Exception('Erreur HTTP ${response.statusCode}: ${response.data}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur Dio lors de la cr√©ation de l\'enveloppe'
               '\n‚îî‚îÄ Code: ${e.response?.statusCode}'
               '\n‚îî‚îÄ Message: ${e.message}'
               '\n‚îî‚îÄ R√©ponse: ${e.response?.data}');
               
      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur g√©n√©rale lors de la cr√©ation de l\'enveloppe'
               '\n‚îî‚îÄ Error: $e');
               
      rethrow;
    }
  }

  // M√©thode pour obtenir l'URL de signature embarqu√©e
  Future<Map<String, dynamic>> getEmbeddedSigningUrl({
    required String envelopeId,
    required String signerEmail,
    required String signerName,
    required String returnUrl,
  }) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üîó Obtention de l\'URL de signature DocuSign'
               '\n‚îî‚îÄ Enveloppe: $envelopeId'
               '\n‚îî‚îÄ Signataire: $signerName ($signerEmail)');

      // V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        throw Exception('Non authentifi√© √† DocuSign. Veuillez vous connecter d\'abord.');
      }

      // R√©cup√©rer les tokens
      final docusignToken = await secureStorage.read(key: _docusignTokenKey);
      final authToken = await secureStorage.getAccessToken();

      // Configuration de la requ√™te
      final options = Options(
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $authToken',
          'X-DocuSign-Token': 'Bearer $docusignToken',
        },
      );

      // Donn√©es √† envoyer
      final data = {
        'envelopeId': envelopeId,
        'signerEmail': signerEmail,
        'signerName': signerName,
        'returnUrl': returnUrl,
      };

      // Appel √† l'API
      final response = await dio.post(
        '$baseUrl/docusign/embedded-signing',
        options: options,
        data: data,
      );

      if (response.statusCode == 200) {
        logger.i('[$timestamp] ‚úÖ URL de signature obtenue avec succ√®s'
                 '\n‚îî‚îÄ R√©ponse: ${response.data}');
                 
        return response.data;
      } else {
        logger.e('[$timestamp] ‚ùå Erreur lors de l\'obtention de l\'URL de signature'
                 '\n‚îî‚îÄ Code HTTP: ${response.statusCode}'
                 '\n‚îî‚îÄ R√©ponse: ${response.data}');
                 
        throw Exception('Erreur HTTP ${response.statusCode}: ${response.data}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur Dio lors de l\'obtention de l\'URL de signature'
               '\n‚îî‚îÄ Code: ${e.response?.statusCode}'
               '\n‚îî‚îÄ Message: ${e.message}'
               '\n‚îî‚îÄ R√©ponse: ${e.response?.data}');
               
      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur g√©n√©rale lors de l\'obtention de l\'URL de signature'
               '\n‚îî‚îÄ Error: $e');
               
      rethrow;
    }
  }

  // M√©thode pour v√©rifier le statut d'une enveloppe
  Future<Map<String, dynamic>> checkEnvelopeStatus({
    required String envelopeId,
  }) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üîç V√©rification du statut de l\'enveloppe DocuSign'
               '\n‚îî‚îÄ Enveloppe: $envelopeId');

      // V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        throw Exception('Non authentifi√© √† DocuSign. Veuillez vous connecter d\'abord.');
      }

      // R√©cup√©rer les tokens
      final docusignToken = await secureStorage.read(key: _docusignTokenKey);
      final authToken = await secureStorage.getAccessToken();

      // Configuration de la requ√™te
      final options = Options(
        headers: {
          'Authorization': 'Bearer $authToken',
          'X-DocuSign-Token': 'Bearer $docusignToken',
        },
      );

      // Appel √† l'API
      final response = await dio.get(
        '$baseUrl/docusign/envelope-status/$envelopeId',
        options: options,
      );

      if (response.statusCode == 200) {
        logger.i('[$timestamp] ‚úÖ Statut de l\'enveloppe obtenu avec succ√®s'
                 '\n‚îî‚îÄ Statut: ${response.data['status']}');
                 
        return response.data;
      } else {
        logger.e('[$timestamp] ‚ùå Erreur lors de la v√©rification du statut'
                 '\n‚îî‚îÄ Code HTTP: ${response.statusCode}'
                 '\n‚îî‚îÄ R√©ponse: ${response.data}');
                 
        throw Exception('Erreur HTTP ${response.statusCode}: ${response.data}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur Dio lors de la v√©rification du statut'
               '\n‚îî‚îÄ Code: ${e.response?.statusCode}'
               '\n‚îî‚îÄ Message: ${e.message}'
               '\n‚îî‚îÄ R√©ponse: ${e.response?.data}');
               
      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur g√©n√©rale lors de la v√©rification du statut'
               '\n‚îî‚îÄ Error: $e');
               
      rethrow;
    }
  }

  // M√©thode pour t√©l√©charger un document sign√©
  Future<Uint8List> downloadSignedDocument({
    required String envelopeId,
  }) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üì• T√©l√©chargement du document sign√© DocuSign'
               '\n‚îî‚îÄ Enveloppe: $envelopeId');

      // V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        throw Exception('Non authentifi√© √† DocuSign. Veuillez vous connecter d\'abord.');
      }

      // R√©cup√©rer les tokens
      final docusignToken = await secureStorage.read(key: _docusignTokenKey);
      final authToken = await secureStorage.getAccessToken();

      // Configuration de la requ√™te
      final options = Options(
        headers: {
          'Authorization': 'Bearer $authToken',
          'X-DocuSign-Token': 'Bearer $docusignToken',
        },
        responseType: ResponseType.bytes,
      );

      // Appel √† l'API
      final response = await dio.get(
        '$baseUrl/docusign/download-document/$envelopeId',
        options: options,
      );

      if (response.statusCode == 200) {
        logger.i('[$timestamp] ‚úÖ Document t√©l√©charg√© avec succ√®s'
                 '\n‚îî‚îÄ Taille: ${response.data.length} octets');
                 
        return response.data;
      } else {
        logger.e('[$timestamp] ‚ùå Erreur lors du t√©l√©chargement du document'
                 '\n‚îî‚îÄ Code HTTP: ${response.statusCode}');
                 
        throw Exception('Erreur HTTP ${response.statusCode}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur Dio lors du t√©l√©chargement du document'
               '\n‚îî‚îÄ Code: ${e.response?.statusCode}'
               '\n‚îî‚îÄ Message: ${e.message}');
               
      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur g√©n√©rale lors du t√©l√©chargement du document'
               '\n‚îî‚îÄ Error: $e');
               
      rethrow;
    }
  }

  // M√©thode pour r√©cup√©rer l'historique des signatures
  Future<Map<String, dynamic>> getSignatureHistory() async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üìö R√©cup√©ration de l\'historique des signatures DocuSign');

      // V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        throw Exception('Non authentifi√© √† DocuSign. Veuillez vous connecter d\'abord.');
      }

      // R√©cup√©rer les tokens
      final authToken = await secureStorage.getAccessToken();

      // Configuration de la requ√™te
      final options = Options(
        headers: {
          'Authorization': 'Bearer $authToken',
        },
      );

      // Appel √† l'API
      final response = await dio.get(
        '$baseUrl/docusign/history',
        options: options,
      );

      if (response.statusCode == 200) {
        logger.i('[$timestamp] ‚úÖ Historique des signatures r√©cup√©r√© avec succ√®s'
                 '\n‚îî‚îÄ Nombre d\'√©l√©ments: ${(response.data['signatures'] as List?)?.length ?? 0}');
                 
        return response.data;
      } else {
        logger.e('[$timestamp] ‚ùå Erreur lors de la r√©cup√©ration de l\'historique'
                 '\n‚îî‚îÄ Code HTTP: ${response.statusCode}'
                 '\n‚îî‚îÄ R√©ponse: ${response.data}');
                 
        throw Exception('Erreur HTTP ${response.statusCode}: ${response.data}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur Dio lors de la r√©cup√©ration de l\'historique'
               '\n‚îî‚îÄ Code: ${e.response?.statusCode}'
               '\n‚îî‚îÄ Message: ${e.message}'
               '\n‚îî‚îÄ R√©ponse: ${e.response?.data}');
               
      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur g√©n√©rale lors de la r√©cup√©ration de l\'historique'
               '\n‚îî‚îÄ Error: $e');
               
      rethrow;
    }
  }

  // M√©thode pour sauvegarder les tokens DocuSign re√ßus depuis localStorage
  Future<bool> saveTokenFromLocalStorage() async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üíæ Tentative de sauvegarde du token DocuSign depuis localStorage');
      
      // R√©cup√©rer le token depuis localStorage (HTML)
      final token = html.window.localStorage['docusign_token'];
      if (token == null || token.isEmpty) {
        logger.w('[$timestamp] ‚ö†Ô∏è Aucun token DocuSign trouv√© dans localStorage');
        return false;
      }

      // R√©cup√©rer le JWT stock√© dans localStorage
      final jwt = html.window.localStorage['docusign_jwt'];
      if (jwt == null || jwt.isEmpty) {
        logger.w('[$timestamp] ‚ö†Ô∏è Aucun JWT DocuSign trouv√© dans localStorage');
        return false;
      }

      // D√©coder le JWT pour extraire les informations
      try {
        // Diviser le JWT en parties
        final parts = jwt.split('.');
        if (parts.length != 3) {
          throw Exception('Format JWT invalide');
        }
        
        // D√©coder la charge utile (payload)
        final payload = parts[1];
        final normalized = base64Url.normalize(payload);
        final decoded = utf8.decode(base64Url.decode(normalized));
        final Map<String, dynamic> jwtData = jsonDecode(decoded);
        
        // Extraire les donn√©es n√©cessaires
        final accountId = jwtData['docusignAccountId'] as String?;
        final expiryTimestamp = jwtData['docusignTokenExpiry'] as int?;
        
        if (accountId == null || expiryTimestamp == null) {
          throw Exception('Donn√©es JWT incompl√®tes');
        }
        
        // Convertir le timestamp en DateTime
        final expiry = DateTime.fromMillisecondsSinceEpoch(expiryTimestamp);
        
        // Sauvegarder dans le stockage s√©curis√©
        await Future.wait([
          secureStorage.write(key: _docusignTokenKey, value: token),
          secureStorage.write(key: _docusignAccountIdKey, value: accountId),
          secureStorage.write(key: _docusignExpiryKey, value: expiry.toIso8601String()),
        ]);
        
        logger.i('[$timestamp] ‚úÖ Token DocuSign sauvegard√© avec succ√®s'
                 '\n‚îî‚îÄ Token: ${token.substring(0, 10)}...'
                 '\n‚îî‚îÄ Account ID: $accountId'
                 '\n‚îî‚îÄ Expiration: ${expiry.toIso8601String()}');
                 
        return true;
      } catch (e) {
        logger.e('[$timestamp] ‚ùå Erreur lors du d√©codage du JWT'
                 '\n‚îî‚îÄ Error: $e');
        return false;
      }
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Erreur lors de la sauvegarde du token DocuSign'
               '\n‚îî‚îÄ Error: $e');
      return false;
    }
  }
}