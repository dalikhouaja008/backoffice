import 'dart:convert';
import 'dart:html' as html;
import 'dart:typed_data';
import 'dart:math';
import 'package:dio/dio.dart';
import 'package:flareline/core/config/api_config.dart';
import 'package:flareline/domain/entities/land_entity.dart';
import 'package:logger/logger.dart';

class DocuSignRemoteDataSource {
  final Dio dio;
  final Logger logger;

  // Variable de token en m√©moire
  String? accessToken;

  // Cl√©s de stockage pour DocuSign
  static const String _docusignTokenKey = 'docusign_token';
  static const String _docusignJwtKey = 'docusign_jwt';
  static const String _docusignAccountIdKey = 'docusign_account_id';
  static const String _docusignExpiryKey = 'docusign_expiry';

  // Constructeur avec baseUrl corrig√©
  DocuSignRemoteDataSource({
    required this.dio,
    required this.logger,
  });

  // URL de base (r√©cup√©r√©e dynamiquement de ApiConfig)
  String get baseUrl => ApiConfig.landServiceUrl;

  Future<bool> isAuthenticated() async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üîç V√©rification d\'authentification DocuSign');

      // 1. V√©rifier si on a un JWT dans localStorage
      final jwt = html.window.localStorage[_docusignJwtKey];
      if (jwt != null && jwt.isNotEmpty) {
        logger.i('[$timestamp] ‚úì JWT DocuSign trouv√© dans localStorage');

        // V√©rifier l'expiration
        final expiryTimeStr = html.window.localStorage[_docusignExpiryKey];
        if (expiryTimeStr != null) {
          try {
            final expiryTime = int.parse(expiryTimeStr);
            final now = DateTime.now().millisecondsSinceEpoch;

            if (now >= expiryTime) {
              logger.w('[$timestamp] ‚ö†Ô∏è Token expir√©');
              await logout(); // Nettoyer les tokens expir√©s
              return false;
            }
          } catch (e) {
            logger.w(
                '[$timestamp] ‚ö†Ô∏è Erreur lors du parsing de l\'expiration: $e');
            // Continuer malgr√© l'erreur car le token existe
          }
        }

        // Mettre √† jour le token en m√©moire pour les utilisations futures
        if (accessToken == null) {
          final token = html.window.localStorage[_docusignTokenKey];
          if (token != null && token.isNotEmpty) {
            accessToken = token;
          }
        }

        logger.i('[$timestamp] ‚úÖ Authentification DocuSign valide');
        return true;
      }

      // 2. V√©rifier aussi le token brut (pour compatibilit√©)
      final token = html.window.localStorage[_docusignTokenKey];
      if (token != null && token.isNotEmpty) {
        logger.i('[$timestamp] ‚úì Token DocuSign brut trouv√© dans localStorage');

        // Mettre √† jour le token en m√©moire
        accessToken = token;

        // V√©rifier l'expiration comme ci-dessus
        final expiryTimeStr = html.window.localStorage[_docusignExpiryKey];
        if (expiryTimeStr != null) {
          try {
            final expiryTime = int.parse(expiryTimeStr);
            final now = DateTime.now().millisecondsSinceEpoch;

            if (now >= expiryTime) {
              logger.w('[$timestamp] ‚ö†Ô∏è Token expir√©');
              await logout();
              return false;
            }
          } catch (e) {
            logger.w(
                '[$timestamp] ‚ö†Ô∏è Erreur lors du parsing de l\'expiration: $e');
          }
        }

        logger.i(
            '[$timestamp] ‚úÖ Authentification DocuSign valide (via token brut)');
        return true;
      }

      logger.e('[$timestamp] ‚ùå Aucun token DocuSign trouv√©');
      return false;
    } catch (e) {
      logger.e('‚ùå Exception lors de la v√©rification d\'authentification: $e');
      return false;
    }
  }

  void initiateAuthentication() {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger
          .i('[$timestamp] üöÄ Initialisation de l\'authentification DocuSign');

      // AJOUT: Logger l'URL compl√®te
      final authUrl = '$baseUrl/docusign/login';
      logger.i('[$timestamp] üåê URL d\'authentification: $authUrl');

      // D√©finir les dimensions pour la fen√™tre popup
      final width = 800;
      final height = 600;
      final left = (html.window.screen!.width! - width) / 2;
      final top = (html.window.screen!.height! - height) / 4;

      // Ouvrir une fen√™tre popup pour l'authentification
      html.window.open(authUrl, 'DocuSignAuth',
          'width=$width,height=$height,left=$left,top=$top,resizable,scrollbars,status');

      logger.i(
          '[$timestamp] üåê Fen√™tre d\'authentification DocuSign ouverte avec succ√®s');
    } catch (e) {
      logger.e(
          '‚ùå Erreur lors de l\'initialisation de l\'authentification DocuSign: $e');
    }
  }

  // M√©thode pour d√©finir le token d'acc√®s
  Future<void> setAccessToken(String token,
      {int? expiresIn, String? accountId}) async {
    try {
      final timestamp = DateTime.now().toIso8601String();

      // Stocker le token en m√©moire pour performance
      accessToken = token;
      logger.i(
          '[$timestamp] üîê Token d√©fini en m√©moire: ${token.substring(0, min(10, token.length))}...');

      // Stocker dans localStorage
      html.window.localStorage[_docusignTokenKey] = token;
      logger.i(
          '[$timestamp] üîê Token stock√© dans localStorage (longueur: ${token.length})');

      // Stocker l'ID du compte si fourni
      if (accountId != null && accountId.isNotEmpty) {
        html.window.localStorage[_docusignAccountIdKey] = accountId;
        logger.i('[$timestamp] üîê ID de compte stock√©: $accountId');
      }

      // Calculer et stocker la date d'expiration
      int expiryTime;
      if (expiresIn != null) {
        expiryTime = DateTime.now().millisecondsSinceEpoch + (expiresIn * 1000);
      } else {
        // Valeur par d√©faut: 1 heure
        expiryTime = DateTime.now().millisecondsSinceEpoch + (3600 * 1000);
      }

      html.window.localStorage[_docusignExpiryKey] = expiryTime.toString();
      logger.i(
          '[$timestamp] üîê Expiration stock√©e: ${DateTime.fromMillisecondsSinceEpoch(expiryTime)}');
      logger.i('[$timestamp] üîê Valeur brute d\'expiration: $expiryTime');

      // V√©rifier que le token a bien √©t√© stock√©
      final storedToken = html.window.localStorage[_docusignTokenKey];
      if (storedToken == token) {
        logger
            .i('[$timestamp] ‚úÖ V√©rification r√©ussie: le token est bien stock√©');
      } else {
        logger.e(
            '[$timestamp] ‚ùå ERREUR: Le token n\'a pas √©t√© correctement stock√©!');
      }
    } catch (e) {
      logger.e('‚ùå Erreur lors de la d√©finition du token: $e');
    }
  }

  // M√©thode de d√©connexion
  Future<void> logout() async {
    final timestamp = DateTime.now().toIso8601String();
    logger.i('[$timestamp] üßπ Suppression des tokens DocuSign');

    // Effacer la variable en m√©moire
    accessToken = null;

    // Effacer localStorage
    html.window.localStorage.remove(_docusignTokenKey);
    html.window.localStorage.remove(_docusignJwtKey);
    html.window.localStorage.remove(_docusignAccountIdKey);
    html.window.localStorage.remove(_docusignExpiryKey);

    logger.i('[$timestamp] ‚úÖ Tokens DocuSign supprim√©s avec succ√®s');

    // V√©rification que les tokens ont bien √©t√© supprim√©s
    final tokenCheck = html.window.localStorage[_docusignTokenKey];
    if (tokenCheck == null) {
      logger.i(
          '[$timestamp] ‚úÖ V√©rification r√©ussie: le token a bien √©t√© supprim√©');
    } else {
      logger.e(
          '[$timestamp] ‚ùå ERREUR: Le token n\'a pas √©t√© correctement supprim√©!');
    }
  }

  // M√©thode pour traiter le token re√ßu
  Future<bool> processReceivedToken(String token, String? jwt,
      {String? accountId, int? expiresIn, String? expiryValue}) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üîÑ Traitement des tokens DocuSign re√ßus');

      // Logger les param√®tres re√ßus
      logger.i(
          '[$timestamp] üìã Token brut re√ßu (d√©but): ${token.substring(0, min(10, token.length))}...');
      logger.i(
          '[$timestamp] üìã Token brut re√ßu (longueur): ${token.length} caract√®res');
      if (jwt != null) {
        logger.i(
            '[$timestamp] üìã JWT re√ßu (d√©but): ${jwt.substring(0, min(10, jwt.length))}...');
        logger
            .i('[$timestamp] üìã JWT re√ßu (longueur): ${jwt.length} caract√®res');
      }
      if (accountId != null) {
        logger.i('[$timestamp] üìã ID de compte: $accountId');
      }
      if (expiresIn != null) {
        logger.i('[$timestamp] üìã Expire dans: $expiresIn secondes');
      }
      if (expiryValue != null) {
        logger
            .i('[$timestamp] üìã Valeur d\'expiration explicite: $expiryValue');
      }

      // IMPORTANT: Nettoyer le token et le JWT
      final cleanToken = _cleanToken(token);
      String? cleanJwt = jwt != null ? _cleanToken(jwt) : null;

      // Stocker le token brut
      html.window.localStorage[_docusignTokenKey] = cleanToken;
      accessToken = cleanToken; // Mettre √† jour aussi en m√©moire
      logger.i('[$timestamp] ‚úÖ Token brut stock√© dans localStorage');

      // Stocker le JWT si disponible
      if (cleanJwt != null && cleanJwt.isNotEmpty) {
        html.window.localStorage[_docusignJwtKey] = cleanJwt;
        logger.i('[$timestamp] ‚úÖ JWT stock√© dans localStorage');
      }

      // Stocker l'ID du compte si disponible
      if (accountId != null && accountId.isNotEmpty) {
        html.window.localStorage[_docusignAccountIdKey] = accountId;
        logger.i('[$timestamp] ‚úÖ ID de compte stock√© dans localStorage');
      }

      // G√©rer l'expiration
      if (expiryValue != null) {
        try {
          html.window.localStorage[_docusignExpiryKey] = expiryValue;
          logger.i(
              '[$timestamp] ‚úÖ Expiration explicite stock√©e dans localStorage');
        } catch (e) {
          logger.w('[$timestamp] ‚ö†Ô∏è Erreur avec l\'expiration explicite: $e');
        }
      } else if (expiresIn != null) {
        final expiryTime =
            DateTime.now().millisecondsSinceEpoch + (expiresIn * 1000);
        html.window.localStorage[_docusignExpiryKey] = expiryTime.toString();
        logger
            .i('[$timestamp] ‚úÖ Expiration calcul√©e stock√©e dans localStorage');
      }

      // V√©rifier que les donn√©es ont bien √©t√© stock√©es
      logger.i('[$timestamp] ‚úÖ V√©rification des donn√©es stock√©es:');
      logger.i(
          '[$timestamp] ‚úÖ - Token brut: ${html.window.localStorage[_docusignTokenKey] != null ? "OK" : "Manquant"}');
      logger.i(
          '[$timestamp] ‚úÖ - JWT: ${html.window.localStorage[_docusignJwtKey] != null ? "OK" : "Manquant"}');
      logger.i(
          '[$timestamp] ‚úÖ - ID de compte: ${html.window.localStorage[_docusignAccountIdKey] != null ? "OK" : "Manquant"}');
      logger.i(
          '[$timestamp] ‚úÖ - Expiration: ${html.window.localStorage[_docusignExpiryKey] != null ? "OK" : "Manquant"}');

      logger.i('[$timestamp] ‚úÖ Tokens trait√©s et stock√©s avec succ√®s');
      return true;
    } catch (e) {
      logger.e('‚ùå Erreur lors du traitement du token: $e');
      return false;
    }
  }

  // M√©thode pour cr√©er une enveloppe pour signature embarqu√©e

  String _cleanToken(String token) {
    return token
        .replaceAll(RegExp(r'\s+'), '') // Supprimer tous les espaces blancs
        .replaceAll(RegExp(r'[^\x20-\x7E]'),
            ''); // Garder uniquement les caract√®res ASCII imprimables
  }

  // M√©thode pour obtenir l'URL de signature embarqu√©e
  Future<Map<String, dynamic>> getEmbeddedSigningUrl({
    required String envelopeId,
    required String signerEmail,
    required String signerName,
    String? returnUrl,
  }) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üîó Obtention de l\'URL de signature DocuSign'
          '\n‚îî‚îÄ Enveloppe: $envelopeId'
          '\n‚îî‚îÄ Signataire: $signerName ($signerEmail)');

      // V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        logger.e('[$timestamp] ‚ùå Non authentifi√© √† DocuSign');
        throw Exception(
            'Non authentifi√© √† DocuSign. Veuillez vous reconnecter.');
      }

      // R√©cup√©rer les tokens
      String? tokenToUse;
      final jwt = html.window.localStorage[_docusignJwtKey];
      if (jwt != null && jwt.isNotEmpty) {
        logger.i('[$timestamp] üîë Utilisation du JWT depuis localStorage');
        tokenToUse = jwt;
      } else {
        final docusignToken = html.window.localStorage[_docusignTokenKey];
        if (docusignToken == null || docusignToken.isEmpty) {
          logger.e('[$timestamp] ‚ùå Token DocuSign introuvable');
          throw Exception('Token DocuSign introuvable');
        }
        logger
            .i('[$timestamp] üîë Utilisation du token brut depuis localStorage');
        tokenToUse = docusignToken;
      }

      // AJOUT: Logger le token pour debugging
      logger.i(
          '[$timestamp] üìã Token DocuSign (d√©but): ${tokenToUse.substring(0, min(20, tokenToUse.length))}...');

      final authToken = await getAccessToken();

      // URL de retour par d√©faut si non fournie
      final finalReturnUrl = returnUrl ??
          '${ApiConfig.docuSignSigningReturnUrl}?envelopeId=$envelopeId&signing_complete=true';

      // Configuration de la requ√™te
      final options = Options(
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $authToken',
          'X-DocuSign-Token': 'Bearer ${_cleanToken(tokenToUse)}',
        },
      );

      // Donn√©es √† envoyer
      final data = {
        'envelopeId': envelopeId,
        'signerEmail': signerEmail,
        'signerName': signerName,
        'returnUrl': finalReturnUrl,
      };

      logger.i('[$timestamp] üì§ Envoi de la requ√™te pour l\'URL de signature');

      // Appel √† l'API
      final response = await dio
          .post(
            '$baseUrl/docusign/embedded-signing',
            options: options,
            data: data,
          )
          .timeout(const Duration(seconds: 30));

      if (response.statusCode == 200) {
        if (response.data is Map && response.data['success'] == true) {
          logger.i('[$timestamp] ‚úÖ URL de signature obtenue avec succ√®s');
          return response.data;
        } else {
          logger.e(
              '[$timestamp] ‚ùå Format de r√©ponse inattendu: ${response.data}');
          throw Exception('Format de r√©ponse inattendu: ${response.data}');
        }
      } else {
        logger.e('[$timestamp] ‚ùå Erreur HTTP: ${response.statusCode}');
        throw Exception('Erreur HTTP ${response.statusCode}: ${response.data}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();

      // V√©rifier si l'erreur est li√©e √† l'authentification
      if (e.response?.statusCode == 401) {
        logger.e('[$timestamp] üîí Erreur d\'authentification DocuSign (401)');
        await logout();
        throw Exception(
            'Token DocuSign expir√© ou invalide. Veuillez vous reconnecter.');
      }

      logger.e('[$timestamp] ‚ùå Erreur Dio: ${e.message}');
      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Exception: $e');
      rethrow;
    }
  }

  // M√©thode pour v√©rifier le statut d'une enveloppe
  Future<Map<String, dynamic>> checkEnvelopeStatus({
    required String envelopeId,
  }) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üîç V√©rification du statut de l\'enveloppe DocuSign'
          '\n‚îî‚îÄ Enveloppe: $envelopeId');

      // V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        throw Exception(
            'Non authentifi√© √† DocuSign. Veuillez vous reconnecter.');
      }

      // R√©cup√©rer les tokens
      String? tokenToUse;
      final jwt = html.window.localStorage[_docusignJwtKey];
      if (jwt != null && jwt.isNotEmpty) {
        tokenToUse = jwt;
      } else {
        tokenToUse = html.window.localStorage[_docusignTokenKey];
      }

      if (tokenToUse == null || tokenToUse.isEmpty) {
        logger.e('[$timestamp] ‚ùå Token DocuSign introuvable');
        throw Exception('Token DocuSign introuvable');
      }

      final authToken = await getAccessToken();
      if (authToken == null || authToken.isEmpty) {
        logger.e('[$timestamp] ‚ùå Token d\'authentification introuvable');
        throw Exception('Token d\'authentification introuvable');
      }

      // Configuration de la requ√™te
      logger.i('üîß Pr√©paration des en-t√™tes pour la requ√™te');
      final options = Options(
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $authToken',
          'X-DocuSign-Token': 'Bearer ${_cleanToken(tokenToUse)}',
        },
      );

      // Appel √† l'API
      final response = await dio.get(
        '$baseUrl/docusign/envelope-status/$envelopeId',
        options: options,
      );

      if (response.statusCode == 200) {
        logger.i('[$timestamp] ‚úÖ Statut de l\'enveloppe obtenu avec succ√®s'
            '\n‚îî‚îÄ Statut: ${response.data['status']}');

        return response.data;
      } else {
        logger.e('[$timestamp] ‚ùå Erreur HTTP: ${response.statusCode}');
        throw Exception('Erreur HTTP ${response.statusCode}: ${response.data}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();

      // V√©rifier si l'erreur est li√©e √† l'authentification
      if (e.response?.statusCode == 401) {
        logger.e('[$timestamp] üîí Erreur d\'authentification DocuSign (401)');
        await logout();
        throw Exception(
            'Token DocuSign expir√© ou invalide. Veuillez vous reconnecter.');
      }

      logger.e('[$timestamp] ‚ùå Erreur Dio: ${e.message}');
      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Exception: $e');
      rethrow;
    }
  }

  // M√©thode pour t√©l√©charger un document sign√©
  Future<Uint8List> downloadSignedDocument({
    required String envelopeId,
  }) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üì• T√©l√©chargement du document sign√© DocuSign'
          '\n‚îî‚îÄ Enveloppe: $envelopeId');

      // V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        throw Exception(
            'Non authentifi√© √† DocuSign. Veuillez vous reconnecter.');
      }

      // R√©cup√©rer les tokens
      String? tokenToUse;
      final jwt = html.window.localStorage[_docusignJwtKey];
      if (jwt != null && jwt.isNotEmpty) {
        tokenToUse = jwt;
      } else {
        tokenToUse = html.window.localStorage[_docusignTokenKey];
      }

      if (tokenToUse == null || tokenToUse.isEmpty) {
        logger.e('[$timestamp] ‚ùå Token DocuSign introuvable');
        throw Exception('Token DocuSign introuvable');
      }

      final authToken = await getAccessToken();
      if (authToken == null || authToken.isEmpty) {
        logger.e('[$timestamp] ‚ùå Token d\'authentification introuvable');
        throw Exception('Token d\'authentification introuvable');
      }

      // Configuration de la requ√™te
      final options = Options(
        headers: {
          'Authorization': 'Bearer $authToken',
          'X-DocuSign-Token': 'Bearer ${_cleanToken(tokenToUse)}',
        },
        responseType: ResponseType.bytes,
      );

      // Appel √† l'API
      final response = await dio.get(
        '$baseUrl/docusign/download-document/$envelopeId',
        options: options,
      );

      if (response.statusCode == 200) {
        logger.i('[$timestamp] ‚úÖ Document t√©l√©charg√© avec succ√®s'
            '\n‚îî‚îÄ Taille: ${response.data.length} octets');

        return response.data;
      } else {
        logger.e('[$timestamp] ‚ùå Erreur HTTP: ${response.statusCode}');
        throw Exception('Erreur HTTP ${response.statusCode}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();

      // V√©rifier si l'erreur est li√©e √† l'authentification
      if (e.response?.statusCode == 401) {
        logger.e('[$timestamp] üîí Erreur d\'authentification DocuSign (401)');
        await logout();
        throw Exception(
            'Token DocuSign expir√© ou invalide. Veuillez vous reconnecter.');
      }

      logger.e('[$timestamp] ‚ùå Erreur Dio: ${e.message}');
      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Exception: $e');
      rethrow;
    }
  }

  // M√©thode pour r√©cup√©rer l'historique des signatures
  Future<Map<String, dynamic>> getSignatureHistory() async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i(
          '[$timestamp] üìö R√©cup√©ration de l\'historique des signatures DocuSign');

      // V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        throw Exception(
            'Non authentifi√© √† DocuSign. Veuillez vous reconnecter.');
      }

      // R√©cup√©rer le token d'authentification
      final authToken = await getAccessToken();
      if (authToken == null || authToken.isEmpty) {
        logger.e('[$timestamp] ‚ùå Token d\'authentification introuvable');
        throw Exception('Token d\'authentification introuvable');
      }

      // Configuration de la requ√™te
      final options = Options(
        headers: {
          'Authorization': 'Bearer $authToken',
        },
      );

      // Appel √† l'API
      final response = await dio.get(
        '$baseUrl/docusign/history',
        options: options,
      );

      if (response.statusCode == 200) {
        logger.i('[$timestamp] ‚úÖ Historique des signatures r√©cup√©r√© avec succ√®s'
            '\n‚îî‚îÄ Nombre d\'√©l√©ments: ${(response.data['signatures'] as List?)?.length ?? 0}');

        return response.data;
      } else {
        logger.e('[$timestamp] ‚ùå Erreur HTTP: ${response.statusCode}');
        throw Exception('Erreur HTTP ${response.statusCode}: ${response.data}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();

      // V√©rifier si l'erreur est li√©e √† l'authentification
      if (e.response?.statusCode == 401) {
        logger.e('[$timestamp] üîí Erreur d\'authentification DocuSign (401)');
        throw Exception(
            'Token DocuSign expir√© ou invalide. Veuillez vous reconnecter.');
      }

      logger.e('[$timestamp] ‚ùå Erreur Dio: ${e.message}');
      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Exception: $e');
      rethrow;
    }
  }

  Future<Map<String, dynamic>> createEmbeddedEnvelope({
    required String documentBase64,
    required String signerEmail,
    required String signerName,
    required String title,
    String? documentName,
    String? documentType,
  }) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger.i('[$timestamp] üìù Cr√©ation d\'une enveloppe DocuSign'
          '\n‚îî‚îÄ Signataire: $signerName ($signerEmail)'
          '\n‚îî‚îÄ Titre: $title'
          '\n‚îî‚îÄ Taille du document: ${documentBase64.length} caract√®res'
          '\n‚îî‚îÄ Nom du document: ${documentName ?? "Auto-d√©tect√©"}'
          '\n‚îî‚îÄ Type du document: ${documentType ?? "Auto-d√©tect√©"}');

      // 1. V√©rifier si l'authentification est valide
      if (!await isAuthenticated()) {
        logger.e('[$timestamp] ‚ùå Non authentifi√© √† DocuSign');
        throw Exception(
            'Non authentifi√© √† DocuSign. Veuillez vous reconnecter.');
      }

      // 2. R√©cup√©rer les tokens
      // Priorit√© au JWT
      String? tokenToUse;

      final jwt = html.window.localStorage[_docusignJwtKey];
      if (jwt != null && jwt.isNotEmpty) {
        logger.i('[$timestamp] üîë Utilisation du JWT depuis localStorage');
        tokenToUse = jwt;
      } else {
        final docusignToken = html.window.localStorage[_docusignTokenKey];
        if (docusignToken == null || docusignToken.isEmpty) {
          logger
              .e('[$timestamp] ‚ùå Token DocuSign introuvable dans localStorage');
          throw Exception('Token DocuSign introuvable');
        }
        logger
            .i('[$timestamp] üîë Utilisation du token brut depuis localStorage');
        tokenToUse = docusignToken;
      }

      final cleanToken = _cleanToken(tokenToUse);
      logger.i('[$timestamp] üîß Token nettoy√©, longueur: ${cleanToken.length}');

      // R√©cup√©rer le token d'authentification de l'application
      final authToken = await getAccessToken();
      if (authToken == null || authToken.isEmpty) {
        logger.e('[$timestamp] ‚ùå Token d\'authentification introuvable');
        throw Exception('Token d\'authentification introuvable');
      }

      // Configuration de la requ√™te
      logger.i('[$timestamp] üîß Pr√©paration des en-t√™tes pour la requ√™te');
      final options = Options(
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $authToken',
          'X-DocuSign-Token': 'Bearer $cleanToken',
        },
      );

      // Donn√©es √† envoyer
      final data = {
        'documentBase64': documentBase64,
        'signerEmail': signerEmail,
        'signerName': signerName,
        'title': title,
      };

      // NOUVEAU: Ajouter le nom du document si fourni
      if (documentName != null && documentName.isNotEmpty) {
        data['documentName'] = documentName;
      }

      // NOUVEAU: Ajouter le type du document si fourni
      if (documentType != null && documentType.isNotEmpty) {
        data['documentType'] = documentType;
      }

      logger.i(
          '[$timestamp] üì§ Envoi de la requ√™te √† $baseUrl/docusign/create-embedded-envelope');

      // Appel √† l'API
      final response = await dio
          .post(
            '$baseUrl/docusign/create-embedded-envelope',
            options: options,
            data: data,
          )
          .timeout(const Duration(seconds: 30));

      logger.i('[$timestamp] üì• R√©ponse re√ßue: ${response.statusCode}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        // V√©rifier le contenu de la r√©ponse
        if (response.data is Map && response.data['success'] == true) {
          logger.i('[$timestamp] ‚úÖ Enveloppe cr√©√©e avec succ√®s');
          return response.data;
        } else {
          logger.e(
              '[$timestamp] ‚ùå Format de r√©ponse inattendu: ${response.data}');
          throw Exception('Format de r√©ponse inattendu: ${response.data}');
        }
      } else {
        logger.e('[$timestamp] ‚ùå Erreur HTTP: ${response.statusCode}');
        throw Exception('Erreur HTTP ${response.statusCode}: ${response.data}');
      }
    } on DioException catch (e) {
      final timestamp = DateTime.now().toIso8601String();

      // V√©rifier si l'erreur est li√©e √† l'authentification
      if (e.response?.statusCode == 401) {
        logger.e('[$timestamp] üîí Erreur d\'authentification DocuSign (401)');
        logger.e('[$timestamp] üîí R√©ponse du serveur: ${e.response?.data}');

        // Nettoyage des tokens
        await logout();

        throw Exception(
            'Token DocuSign expir√© ou invalide. Veuillez vous reconnecter.');
      }

      logger.e('[$timestamp] ‚ùå Erreur Dio: ${e.message}'
          '\n‚îî‚îÄ Statut: ${e.response?.statusCode}'
          '\n‚îî‚îÄ R√©ponse: ${e.response?.data}');

      throw Exception('Erreur r√©seau: ${e.message}');
    } catch (e) {
      final timestamp = DateTime.now().toIso8601String();
      logger.e('[$timestamp] ‚ùå Exception: $e');
      rethrow;
    }
  }

  // M√©thode pour cr√©er une enveloppe pour signature embarqu√©e (version compatible avec DocuSignService)
  Future<Map<String, dynamic>> createEnvelopeForEmbeddedSigning({
    required Land land,
    required String documentBase64,
    required String signerEmail,
    required String signerName,
  }) async {
    try {
      // Appeler la m√©thode principale de cr√©ation d'enveloppe
      return await createEmbeddedEnvelope(
        documentBase64: documentBase64,
        signerEmail: signerEmail,
        signerName: signerName,
        title: 'Validation juridique du terrain: ${land.title}',
      );
    } catch (e) {
      logger.e(
          '‚ùå Exception lors de la cr√©ation de l\'enveloppe pour signature embarqu√©e: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  // M√©thode pour ouvrir un document sign√© dans le navigateur
  Future<void> openSignedDocument(
      Uint8List documentData, String envelopeId) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      logger
          .i('[$timestamp] üìÇ Ouverture du document sign√© dans le navigateur');

      // Cr√©er un blob √† partir des donn√©es du document
      final blob = html.Blob([documentData]);
      final url = html.Url.createObjectUrlFromBlob(blob);

      // Ouvrir le document dans une nouvelle fen√™tre
      html.window.open(url, 'DocuSignDocument');

      // Nettoyer l'URL de l'objet apr√®s un d√©lai
      Future.delayed(const Duration(minutes: 5), () {
        html.Url.revokeObjectUrl(url);
      });

      logger.i('[$timestamp] ‚úÖ Document ouvert avec succ√®s');
    } catch (e) {
      logger.e(' ‚ùå Erreur lors de l\'ouverture du document: $e');
      throw Exception('Erreur lors de l\'ouverture du document: $e');
    }
  }

  // M√©thode pour r√©cup√©rer un token d'authentification
  Future<String?> getAccessToken() async {
    try {
      // V√©rifier d'abord dans localStorage
      final token = html.window.localStorage['auth_token'];

      if (token != null && token.isNotEmpty) {
        final timestamp = DateTime.now().toIso8601String();
        logger.i(
            '[$timestamp] ‚úÖ Token d\'authentification r√©cup√©r√© depuis localStorage');
        return token;
      }

      logger.w(
          '‚ö†Ô∏è Aucun token d\'authentification trouv√©, utilisation d\'un token temporaire pour le d√©veloppement');
      return 'temp_dev_token_for_testing';
    } catch (e) {
      logger.e(
          '‚ùå Erreur lors de la r√©cup√©ration du token d\'authentification: $e');
      return null;
    }
  }
}
